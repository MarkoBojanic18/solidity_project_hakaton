// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./Patient.sol";

contract RecordFactory{

    Patient[] private patients;                 // list of patients

    // PATIENT

    function createPatient(address patientAccount, string memory _first_name, string memory _last_name, string memory _password, string memory _gender, string memory _year_of_birth, string memory _unique_in, string memory _blood_type, string memory _height, string memory _weight) public {
        Patient newPatient = new Patient(patientAccount,_first_name,_last_name,_password,_gender,_year_of_birth,_unique_in, _blood_type, _height, _weight);

        if(!checkNewPatient(newPatient)){
           patients.push(newPatient);
        }

        
        

    }


//this function is only internal function which is being used by createPatient function.
//this function loops through the list of patients and returns true or false if patient is in the list.
     function checkNewPatient(Patient newPatient)private view returns(bool){
        uint arrayLength = patients.length;

        for(uint i = 0; i < arrayLength; i++){
            if(patients[i].getPatienceAccount() == newPatient.getPatienceAccount()){
                return true;
            }
        }

        return false;
    }

//this function returns patient object if it exists in the list of patients
    function getPatientData() public view returns(Patient){
         uint arrayLength = patients.length;

        for(uint i = 0; i < arrayLength; i++){
            if(patients[i].getPatienceAccount() == msg.sender){
                return patients[i];
            }
        }

        return Patient(address(0));
    }


    function getAllPatients() public view returns(Patient[] memory){
        return patients;
    }

//this function is being used only by login process of patient. It checks patient's password.
    function loginPatient(string memory pass) public view returns(bool){
         uint arrayLength = patients.length;

        for(uint i = 0; i < arrayLength; i++){
            if(patients[i].getPatienceAccount() == msg.sender && keccak256(abi.encodePacked(patients[i].getPatiencePassword())) == keccak256(abi.encodePacked(pass)) ){
                return true;
            }
        }

        return false;
    }


    function addNewInsuranceToPatientList(string memory _typeOfInsurance, string memory _insuranceCoverage) public {
         uint arrayLength = patients.length;

        for(uint i = 0; i < arrayLength; i++){
            if(patients[i].getPatienceAccount() == msg.sender){
               patients[i].addInsuranceToTheList(_typeOfInsurance, _insuranceCoverage);
            }
        }

    }

    function addNewImmunisationToPatientList(string memory _typeOfImmun, address _patient) public {
         uint arrayLength = patients.length;

        for(uint i = 0; i < arrayLength; i++){
            if(patients[i].getPatienceAccount() == _patient){
               patients[i].addImmunisationToTheList(_typeOfImmun);
            }
        }

    }


    function addNewDonationToPatientList(string memory _organ) public {
         uint arrayLength = patients.length;

        for(uint i = 0; i < arrayLength; i++){
            if(patients[i].getPatienceAccount() == msg.sender){
               patients[i].addDonationToTheList(_organ);
            }
        }

    }


    //Medical Record

    function createMedicalRecord(string memory _typeOfRec, string memory _desc, address _docSignature, address _patient, string memory _recipe) public {
        uint arrayLength = patients.length;

        for(uint i = 0; i < arrayLength; i++){
            if(patients[i].getPatienceAccount() == _patient){
                patients[i].addMecialRecordForPatient(_typeOfRec, _desc, _docSignature,_recipe,_patient, address(0));
            }
        }
    }

    function changeMedicalRecordForPatient(uint256 _idn, address _doctorWhoCanSeeRecipe) public {
        uint arrayLength = patients.length;

        for(uint i = 0; i < arrayLength; i++){
            if(patients[i].getPatienceAccount() == msg.sender){
                patients[i].changeMedicalRecord(_idn,_doctorWhoCanSeeRecipe);
            }
        }
    }


    // DOCTOR



    // function createNewDoctor(address _doctorAccount,string memory _first_name,string memory _last_name,string memory _role) public {
    //     Doctor newDoctor = new Doctor(_doctorAccount,_first_name,_last_name,_role);

    //     if(!checkNewDoctor(newDoctor)){
    //          doctors.push(newDoctor);
    //     }
    // }


// //this function is only internal function which is being used by createNewDoctor function.
// //this function loops through the list of doctors and returns true or false if doctor is in the list.
//      function checkNewDoctor(Doctor newDoctor)private view returns(bool){
//         uint arrayLength = doctors.length;

//         for(uint i = 0; i < arrayLength; i++){
//             if(doctors[i].getDoctorAccount() == newDoctor.getDoctorAccount()){
//                 return true;
//             }
//         }

//         return false;
//     }




//     function getAllDoctors() public view returns(Doctor[] memory){
//         return doctors;
//     }






}